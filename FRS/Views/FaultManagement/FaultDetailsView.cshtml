@model FRS.Models.FaultDetails
@{
    var userDetails = ((FRS.Models.MyPrincipal)HttpContext.Current.User).User;
}

<div class="modal-dialog" role="document">
    <div class="modal-content">
        <div class="modal-header">
            <h5 class="modal-title" id="exampleModalLabel">@ViewBag.ModalTitle</h5>
            <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                <span aria-hidden="true">&times;</span>
            </button>
        </div>
        <div class="modal-body">

            <div class="row">
                <div class="col-md-12 subheader">
                    <span>Customer Details</span>
                </div>
            </div>
            <div class="form-group row">
                @Html.HiddenFor(model => model.FaultID)
                <label for="staticEmail" class="col-sm-4 col-form-label">Name:</label>
                <div class="col-sm-8">
                    @if (Model.FaultID == 0)
                    {
                        @Html.TextBoxFor(model => model.CustomerInfo.Name, new { @class = "form-control" })
                    }
                    else
                    {
                        @Html.TextBoxFor(model => model.CustomerInfo.Name, new { @class = "form-control", @readonly = true })
                    }

                </div>
            </div>
            <div class="form-group row">
                <label for="staticEmail" class="col-sm-4 col-form-label">Email:</label>
                <div class="col-sm-8">
                    @if (Model.FaultID == 0)
                    {
                        @Html.TextBoxFor(model => model.CustomerInfo.Email, new { @class = "form-control" })
                    }
                    else
                    {
                        @Html.TextBoxFor(model => model.CustomerInfo.Email, new { @class = "form-control", @readonly = true })
                    }

                </div>
            </div>
            <div class="form-group row">
                <label for="staticEmail" class="col-sm-4 col-form-label">Phone:</label>
                <div class="col-sm-8">
                    @if (Model.FaultID == 0)
                    {
                        @Html.TextBoxFor(model => model.CustomerInfo.Phone, new { @class = "form-control" })
                    }
                    else
                    {
                        @Html.TextBoxFor(model => model.CustomerInfo.Phone, new { @class = "form-control", @readonly = true })
                    }

                </div>
            </div>

            <div class="row">
                <div class="col-md-12 subheader">
                    <span>Fault Details</span>
                </div>
            </div>

            @if (userDetails.RoleID != 4)
            {
                if (Model.StatusDescription.ToLower() == "closed")
                {
                    <div class="form-group row">
                        <label for="staticEmail" class="col-sm-4 col-form-label">Fault Status:</label>
                        <div class="col-sm-8">
                            @Html.DropDownListFor(model => model.StatusID, Model.FaultStatusList == null ? Enumerable.Empty<SelectListItem>() : new SelectList(Model.FaultStatusList, "Value", "Text"), "--Select--", new { @class = "form-control", @readonly = true })
                        </div>
                    </div>
                }
                else
                {
                    <div class="form-group row">
                        <label for="staticEmail" class="col-sm-4 col-form-label">Fault Status:</label>
                        <div class="col-sm-8">
                            @Html.TextBoxFor(model => model.StatusDescription, new { @class = "form-control", @readonly = true })
                        </div>
                    </div>
                }
            }

            <div class="form-group row">
                <label for="staticEmail" class="col-sm-4 col-form-label">Fault Priority:</label>
                <div class="col-sm-8">

                    @if (userDetails.RoleID == 4 || Model.StatusDescription.ToLower() == "closed" || userDetails.RoleID == 5)
                    {
                        @Html.DropDownListFor(model => model.FaultPriorityID, Model.FaultPriorityList == null ? Enumerable.Empty<SelectListItem>() : new SelectList(Model.FaultPriorityList, "Value", "Text", ViewBag.SelectedFaultStatusList), "--Select--", new { @class = "form-control", @readonly = true })
                    }
                    else
                    {
                        @Html.DropDownListFor(model => model.FaultPriorityID, Model.FaultPriorityList == null ? Enumerable.Empty<SelectListItem>() : new SelectList(Model.FaultPriorityList, "Value", "Text"), "--Select--", new { @class = "form-control" })
                    }




                </div>
            </div>

            <div class="form-group row">
                <label for="staticEmail" class="col-sm-4 col-form-label">Product Name:</label>
                <div class="col-sm-8">
                    @if (userDetails.RoleID == 4 || Model.StatusDescription.ToLower() == "closed" || userDetails.RoleID == 5)
                    {
                        @Html.DropDownListFor(model => model.ProductID, Model.ProductList == null ? Enumerable.Empty<SelectListItem>() : new SelectList(Model.ProductList, "Value", "Text"), "--Select--", new { @class = "form-control", @readonly = true })
                    }
                    else
                    {
                        @Html.DropDownListFor(model => model.ProductID, Model.ProductList == null ? Enumerable.Empty<SelectListItem>() : new SelectList(Model.ProductList, "Value", "Text"), "--Select--", new { @class = "form-control" })
                    }
                </div>
            </div>
            <div class="form-group row">
                <label for="staticEmail" class="col-sm-4 col-form-label">Fault Type:</label>
                <div class="col-sm-8">
                    @if (userDetails.RoleID == 4 || Model.StatusDescription.ToLower() == "closed" || userDetails.RoleID == 5)
                    {
                        @Html.DropDownListFor(model => model.FaultTypeID, Model.FaultTypeList == null ? Enumerable.Empty<SelectListItem>() : new SelectList(Model.FaultTypeList, "Value", "Text"), "--Select--", new { @class = "form-control", @readonly = true })
                    }
                    else
                    {
                        @Html.DropDownListFor(model => model.FaultTypeID, Model.FaultTypeList == null ? Enumerable.Empty<SelectListItem>() : new SelectList(Model.FaultTypeList, "Value", "Text"), "--Select--", new { @class = "form-control" })
                    }
                </div>
            </div>
            <div class="form-group row">
                <label for="staticEmail" class="col-sm-4 col-form-label">Fault Description:</label>
                <div class="col-sm-8">
                    @if (userDetails.RoleID == 4 || Model.StatusDescription.ToLower() == "closed" || userDetails.RoleID == 5)
                    {
                        @Html.TextAreaFor(model => model.FaultDescription, 10, 10, new { @class = "form-control", @readonly = true })
                    }
                    else
                    {                        
                        @Html.TextAreaFor(model => model.FaultDescription, 10, 10, new { @class = "form-control" })
                    }
                </div>
            </div>
            @if (Model.FaultID > 0)
            {
                <div class="form-group row">
                    <label for="staticEmail" class="col-sm-4 col-form-label">Fault Reporting Date:</label>
                    <div class="col-sm-8">
                        @*@if (userDetails.RoleID == 4)
                            {*@
                        @Html.TextBoxFor(model => model.FaultReportingDate, new { @class = "form-control", @readonly = true })
                        @*}
                            else
                            {
                                @Html.TextBoxFor(model => model.FaultReportingDate, new { @class = "form-control" })
                            }*@
                    </div>
                </div>


                if (userDetails.RoleID == 4)
                {
                    if (Model.StatusDescription.ToLower() != "closed")
                    {
                        <div class="form-group row">
                            <label for="staticEmail" class="col-sm-4 col-form-label">Fault Status:</label>
                            <div class="col-sm-8">
                                @Html.DropDownListFor(model => model.StatusID, Model.FaultStatusList == null ? Enumerable.Empty<SelectListItem>() : new SelectList(Model.FaultStatusList, "Value", "Text"), "--Select--", new { @class = "form-control" })
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="form-group row">
                            <label for="staticEmail" class="col-sm-4 col-form-label">Fault Status:</label>
                            <div class="col-sm-8">
                                @Html.TextBoxFor(model => model.StatusDescription, new { @class = "form-control", @readonly = true })
                            </div>
                        </div>
                    }
                }

                <div class="form-group row">
                    <label for="staticEmail" class="col-sm-4 col-form-label">Fault Resolved Date:</label>
                    <div class="col-sm-8">
                        @if (userDetails.RoleID == 4 && Model.StatusDescription.ToLower() != "closed")
                        {
                            //@Html.TextBoxFor(model => model.FaultResolvedDate, new { @class = "form-control" })

                            <div class='input-group date' id='FaultResolvedDate'>
                                <input type='text' class="form-control" id="FaultResolvedDate" />
                                <span class="input-group-addon datetimepicker">
                                    <span class="glyphicon glyphicon-calendar"></span>
                                </span>
                            </div>

                        }
                        else
                        {
                            <div class='input-group date' id='FaultResolvedDate'>
                                <input type='text' class="form-control" id="FaultResolvedDate" readonly />
                                <span class="input-group-addon datetimepicker">
                                    <span class="glyphicon glyphicon-calendar"></span>
                                </span>
                            </div>

                            //@Html.TextBoxFor(model => model.FaultResolvedDate, new { @class = "form-control", @readonly = true })
                        }
                    </div>
                </div>

                if (userDetails.RoleID == 4 && Model.StatusDescription.ToLower() != "closed")
                {
                    <div class="form-group row">
                        <label for="staticEmail" class="col-sm-4 col-form-label">Comment:</label>
                        <div class="col-sm-8">
                            <textarea id="txtcomment" rows="10" cols="150"></textarea>
                        </div>
                    </div>
                }
            }




            @if (Model.DeveloperCommentList != null && Model.DeveloperCommentList.Count > 0)
            {
                <div class="row">
                    <div class="col-md-12 subheader">
                        <span>Developer Comments</span>
                    </div>
                </div>

                foreach (var comments in Model.DeveloperCommentList)
                {
                    <div class="row">
                        <div class="col-md-12">
                            @comments.Date - @comments.UserName: @comments.Comment
                        </div>
                    </div>
                }
            }




        </div>
        <div class="modal-footer">
            <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
            @if (Model.FaultID == 0)
            {
                <button type="button" class="btn btn-primary" id="btnAddFaultPopup">Add Fault</button>
            }
            else if (Model.FaultID > 0 && userDetails.RoleID == 4)
            {
                if (Model.StatusDescription.ToLower() != "closed")
                {
                    <button type="button" class="btn btn-primary" id="btnUpdateFaultDeveloperPopup">Update Fault</button>
                }
            }
            else if(userDetails.RoleID != 5)
            {
                if (Model.StatusDescription.ToLower() != "closed")
                {
                    <button type="button" class="btn btn-primary" id="btnUpdateFaultPopup">Update Fault</button>
                }
            }

        </div>
    </div>


</div>

<script type="text/javascript">
    $(document).ready(function () {
        if('@Model.FaultResolvedDate' != "")
        {
            console.log('@Model.FaultResolvedDate');
            $("div#FaultResolvedDate").datetimepicker({
                date: new Date('@Model.FaultResolvedDate'),
                format : 'DD-MM-YYYY HH:mm'
            });
            $("div#FaultResolvedDate").data("DateTimePicker").date('@Model.FaultResolvedDate');
        }
        else
        {
            $("div#FaultResolvedDate").datetimepicker({
                   format : 'DD-MM-YYYY HH:mm'
            });
        }




        $("#btnAddFaultPopup").click(function () {
                var faultDetails = {
                "CustomerInfo": {
                    "Name": $("#CustomerInfo_Name").val(),
                    "Phone": $("#CustomerInfo_Phone").val(),
                    "Email": $("#CustomerInfo_Email").val()
                },
                "FaultDescription": $("#FaultDescription").val(),
                "ProductID": $("#ProductID option:selected").val(),
                "FaultTypeID": $("#FaultTypeID option:selected").val(),
                "StatusID": $("#StatusID option:selected").val(),
                "FaultPriorityID": $("#FaultPriorityID option:selected").val(),
            };

            $.ajax({
            url: '@Url.Action("AddFaultDetails","FaultManagement")',
                ContentType: "application/json",
                type: "POST",
                data: faultDetails,
                success: function (data) {
                    if (data.result == 2) {
                        $("#dvupdateaddfault").modal("hide");
                        alert("Fault details have been saved successfully. Your Request number: " + data.faultId);
                        $("#faultdetailsgrid").DataTable().ajax.reload();
                    }
                    else {
                        alert("Error occured while saving the fault details");
                    }
                },
                error: function () {
                    alert("Error occured while saving the fault details");
                }
            });
        });

        $("#btnUpdateFaultPopup").click(function () {
            var faultDetails = {
                "FaultID": $("#FaultID").val(),
                "FaultDescription": $("#FaultDescription").val(),
                "ProductID": $("#ProductID option:selected").val(),
                "FaultTypeID": $("#FaultTypeID option:selected").val(),
                "StatusID": $("#StatusID option:selected").val(),
                "FaultPriorityID": $("#FaultPriorityID option:selected").val(),
                "FaultResolvedDate": $("#FaultResolvedDate").val()
            };

            $.ajax({
                url: '@Url.Action("UpdateFaultDetails", "FaultManagement")',
                ContentType: "application/json",
                type: "POST",
                data: faultDetails,
                success: function (data) {
                        if (data == 2) {
                        $("#dvupdateaddfault").modal("hide");
                            alert("Request Number: " + '@Model.FaultID' + " Fault details have been saved successfully.");
                        $("#faultdetailsgrid").DataTable().ajax.reload();
                        }
                        else {
                            alert("Error occured while saving the fault details");
                        }
                    },
                error: function () {
                        alert("Error occured while saving the fault details");
                    }
                });
        });

        $("#btnUpdateFaultDeveloperPopup").click(function () {
            var faultDetails = {
                "FaultID": $("#FaultID").val(),
                "Comment": $("#txtcomment").val(),
                "FaultResolvedDate": $("#FaultResolvedDate").val(),
                "StatusID": $("#StatusID option:selected").val()
            };
            $.ajax({
                url: '@Url.Action("UpdateFaultDetails", "FaultManagement")',
                ContentType: "application/json",
                type: "POST",
                data: faultDetails,
                success: function (data) {
                        if (data == 2) {
                        $("#dvupdateaddfault").modal("hide");
                            alert("Request Number: " + '@Model.FaultID' + " Fault details have been saved successfully.");
                        $("#faultdetailsgrid").DataTable().ajax.reload();
                        }
                        else {
                            alert("Error occured while saving the fault details");
                        }
                    },
                error: function () {
                        alert("Error occured while saving the fault details");
                    }
                });
        });


    });
</script>
